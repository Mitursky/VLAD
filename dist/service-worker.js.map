{"version":3,"sources":["service-worker.js"],"names":["filesToCache","staticCacheName","self","addEventListener","event","console","log","waitUntil","caches","open","then","cache","addAll","respondWith","match","request","response","url","fetch","put","clone","catch","error","cacheWhitelist","keys","cacheNames","Promise","all","map","cacheName","indexOf","delete"],"mappings":";AAAA,IAAMA,EAAe,CACjB,IACA,aACA,YAGEC,EAAkB,OAExBC,KAAKC,iBAAiB,UAAW,SAAAC,GAC7BC,QAAQC,IAAI,gEACZF,EAAMG,UACFC,OAAOC,KAAKR,GAAiBS,KAAK,SAAAC,GACvBA,OAAAA,EAAMC,OAAOZ,QAKhCE,KAAKC,iBAAiB,QAAS,SAAAC,GAC3BA,EAAMS,YACFL,OACKM,MAAMV,EAAMW,SACZL,KAAK,SAAAM,GACEA,OAAAA,GACAX,QAAQC,IAAI,SAAUF,EAAMW,QAAQE,IAAK,aAClCD,IAEXX,QAAQC,IAAI,uBAAwBF,EAAMW,QAAQE,KAC3CC,MAAMd,EAAMW,YAEtBL,KAAK,SAAAM,GAEKR,OAAAA,OAAOC,KAAKR,GAAiBS,KAAK,SAAAC,GAE9BK,OADPL,EAAMQ,IAAIf,EAAMW,QAAQE,IAAKD,EAASI,SAC/BJ,MAGdK,MAAM,SAAAC,SAMnBpB,KAAKC,iBAAiB,WAAY,SAAAC,GAChCC,QAAQC,IAAI,oCAENiB,IAAAA,EAAiB,CAACtB,GAExBG,EAAMG,UACJC,OAAOgB,OAAOd,KAAK,SAAAe,GACVC,OAAAA,QAAQC,IACbF,EAAWG,IAAI,SAAAC,GACTN,IAAuC,IAAvCA,EAAeO,QAAQD,GAClBrB,OAAAA,OAAOuB,OAAOF","file":"service-worker.js","sourceRoot":"../src","sourcesContent":["const filesToCache = [\n    \"/\",\n    \"index.html\",\n    \"index.js\",\n];\n\nconst staticCacheName = \"v1.2\";\n\nself.addEventListener(\"install\", event => {\n    console.log(\"Attempting to install service worker and cache static assets\");\n    event.waitUntil(\n        caches.open(staticCacheName).then(cache => {\n            return cache.addAll(filesToCache);\n        })\n    );\n});\n\nself.addEventListener(\"fetch\", event => {\n    event.respondWith(\n        caches\n            .match(event.request)\n            .then(response => {\n                if (response) {\n                    console.log(\"Found \", event.request.url, \" in cache\");\n                    return response;\n                }\n                console.log(\"Network request for \", event.request.url);\n                return fetch(event.request);\n            })\n            .then(response => {\n                // TODO 5 - Respond with custom 404 page\n                return caches.open(staticCacheName).then(cache => {\n                    cache.put(event.request.url, response.clone());\n                    return response;\n                });\n            })\n            .catch(error => {\n                // TODO 6 - Respond with custom offline page\n            })\n    );\n});\n\nself.addEventListener('activate', event => {\n  console.log('Activating new service worker...');\n\n  const cacheWhitelist = [staticCacheName];\n\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return Promise.all(\n        cacheNames.map(cacheName => {\n          if (cacheWhitelist.indexOf(cacheName) === -1) {\n            return caches.delete(cacheName);\n          }\n        })\n      );\n    })\n  );\n});\n"]}